using Microsoft.SemanticKernel;
using System.ComponentModel;

public class FilePlugin
{
    private string? workingFilePath; /* Stores working file path */
    private string? workingDirectory; /* Stores working directory */
    private string? lastFileContent; /* Stores last file content */

    // Set working directory
    [KernelFunction("set_working_directory")]
    [Description("Sets the directory where the agent will operate and read files.")]
    public string SetWorkingDirectory(string directoryPath)
    {
        // Ensure directory exists
        if (!Directory.Exists(directoryPath))
        {
            // Console.WriteLine($"Error: Directory '{directoryPath}' does not exist.");
            // return;
            return $"Error: Directory '{directoryPath}' does not exist.";
        }

        // Update working directory
        workingDirectory = directoryPath;
        return $"Working directory set to {directoryPath}";
    }

    // Method to set a file to be modified
    [KernelFunction("set_working_file")]
    [Description("Sets the file which will be used for WriteFile and ReadFile")]
    public string SetWorkingFile(string path)
    {
        // Ensure file exists
        if (File.Exists(path))
        {
            // Update working file
            workingFilePath = path;
            return $"Working file path set to {path}";
        }
        return $"Error: Failed to locate file.";
    }

    // Method to modify a file
    [KernelFunction("update_file")]
    [Description("Updates a file with the updated code generated by CodingAgent")]

    public string WriteFile(string path, string content)
    {
        string filePath = path ?? workingFilePath ?? throw new ArgumentException("No file path specified");

        try
        {
            // Ensure file exists
            if (File.Exists(filePath))
            {
                // Update lastFileContent before writing to the file for reverting
                lastFileContent = File.ReadAllText(filePath);
            }

            // Write to the file
            File.WriteAllText(filePath, content);
            return $"File updated: {filePath}";
        }
        catch (Exception ex)
        {
            return $"Error writing to file: {ex.Message}";
        }
    }

    // Method to revert changes made to a file
    [KernelFunction("revert_file")]
    [Description("Reverts the last change made to the working file.")]
    public string RevertFile()
    {
        // Ensure a working file is set and there is previous content to restore
        if (string.IsNullOrEmpty(workingFilePath) || string.IsNullOrEmpty(lastFileContent))
        {
            return "No previous file content to revert to.";
        }

        try
        {
            // Write previous content to file
            File.WriteAllText(workingFilePath, lastFileContent);
            return $"Reverted changes to {workingFilePath}.";
        }
        catch (Exception ex)
        {
            return $"Error reverting file: {ex.Message}";
        }
    }

    // Method to read a file
    [KernelFunction("read_file")]
    [Description("Reads from a file and obtains its string contents")]

    public string ReadFile(string fileName)
    {
        // Ensure a working directory has been set
        if (string.IsNullOrEmpty(workingDirectory))
        {
            return "No working directory set. Use 'set_working_directory' first.";
        }

        try
        {
            // Search for the file in the immediate directory
            string filePath = Path.Combine(workingDirectory, fileName);

            // Do not read env files
            if (Path.GetExtension(filePath).ToLower().Equals(".env"))
            {
                return "Cannot read an environment file";
            }
            
            if (File.Exists(filePath))
            {
                // Read the file
                return File.ReadAllText(filePath);
            }

            // If not found, search all subdirectories
            var files = Directory.GetFiles(workingDirectory, fileName, SearchOption.AllDirectories);
            if (files.Length > 0)
            {
                // Read the first matching file
                return File.ReadAllText(files[0]); 
            }

            // File was not found
            return $"File '{fileName}' not found in the directory or subdirectories.";
        }
        catch (Exception ex)
        {
            return $"Error reading file '{fileName}': {ex.Message}";
        }
    }

    // Read all files, including subdirectory files, intended for cross-file context gathering
    [KernelFunction("read_all_files")]
    [Description("Reads all files in the current working directory and subdirectories, returning their contents.")]
    public string ReadAllFiles()
    {
        // Ensure a working directory has been set
        if (string.IsNullOrEmpty(workingDirectory))
        {
            return "No working directory set. Use 'set_working_directory' first.";
        }

        try
        {
            // Get all files in directory/subdirectories
            var files = Directory.GetFiles(workingDirectory, "*", SearchOption.AllDirectories);
            if (files.Length == 0) return "No files found in the directory.";

            // Concatenate file contents
            var fileContents = new List<string>();
            foreach (var file in files)
            {
                try
                {
                    // Skip env files
                    if (Path.GetExtension(Path.Combine(workingDirectory, file)).ToLower().Equals(".env"))
                    {
                        continue;
                    }

                    fileContents.Add($"File: {Path.GetRelativePath(workingDirectory, file)}\n{File.ReadAllText(file)}\n");
                }
                catch (Exception ex)
                {
                    fileContents.Add($"Error reading {file}: {ex.Message}");
                }
            }

            return string.Join("\n", fileContents);
        }
        catch (Exception ex)
        {
            return $"Error reading files: {ex.Message}";
        }
    }
    
    // Lists all files, including subdirectory files
    [KernelFunction("list_files")]
    [Description("Lists all files in the current working directory, including subdirectories.")]
    public string ListFiles()
    {
        // Ensure working directory is set
        if (string.IsNullOrEmpty(workingDirectory))
        {
            return "No working directory set. Use 'set_working_directory' first.";
        }

        try
        {
            // List all files in directory/subdirectories
            var files = Directory.GetFiles(workingDirectory, "*", SearchOption.AllDirectories);
            return files.Length > 0 ? string.Join("\n", files) : "No files found in the directory.";
        }
        catch (Exception ex)
        {
            return $"Error listing files: {ex.Message}";
        }
    }
}